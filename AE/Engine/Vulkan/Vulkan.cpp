
#include "Vulkan.h"

#include <assert.h>
#include <iostream>

#include "../Memory/MemoryTypes.h"

#include "../Memory/MemoryPool/MemoryPool.h"

namespace AE
{

#if BUILD_VULKAN_MEMORY_ALLOCATOR_TYPE == 1 || BUILD_VULKAN_MEMORY_ALLOCATOR_TYPE == 2

#if BUILD_VULKAN_MEMORY_ALLOCATOR_TYPE == 2
int64_t vulkan_allocation_counter		= 0;
#endif

void * VulkanMemoryAllocationFunc(
	void					*	pUserData,
	size_t						size,
	size_t						alignment,
	VkSystemAllocationScope		allocationScope )
{
	auto memory					= engine_internal::MemoryPool_AllocateRaw( size, alignment );
	TODO( "All Vulkan memory debuggin reports" );
#if BUILD_VULKAN_MEMORY_ALLOCATOR_TYPE == 2
	++vulkan_allocation_counter;
#endif
	return memory;
}

void * VulkanMemoryReallocationFunc(
	void					*	pUserData,
	void					*	pOriginal,
	size_t						size,
	size_t						alignment,
	VkSystemAllocationScope		allocationScope )
{
	auto memory					= engine_internal::MemoryPool_ReallocateRaw( pOriginal, size, alignment );
#if BUILD_VULKAN_MEMORY_ALLOCATOR_TYPE == 2

#endif
	return memory;
}

void VulkanMemoryFreeFunc(
	void					*	pUserData,
	void					*	pMemory )
{
	if( pMemory ) {
#if BUILD_VULKAN_MEMORY_ALLOCATOR_TYPE == 2
		--vulkan_allocation_counter;
#endif
		engine_internal::MemoryPool_FreeRaw( pMemory );
	}
}

void VulkanMemoryInternalAllocationNotificationFunc(
	void					*	pUserData,
	size_t						size,
	VkInternalAllocationType	allocationType,
	VkSystemAllocationScope		allocationScope )
{
#if BUILD_VULKAN_MEMORY_ALLOCATOR_TYPE == 2

#endif
}

void VulkanMemoryInternalFreeNotificationFunc(
	void					*	pUserData,
	size_t						size,
	VkInternalAllocationType	allocationType,
	VkSystemAllocationScope		allocationScope )
{
#if BUILD_VULKAN_MEMORY_ALLOCATOR_TYPE == 2

#endif
}

VkAllocationCallbacks vulkan_allocation_callbacks {
	nullptr,
	VulkanMemoryAllocationFunc,
	VulkanMemoryReallocationFunc,
	VulkanMemoryFreeFunc,
	VulkanMemoryInternalAllocationNotificationFunc,
	VulkanMemoryInternalFreeNotificationFunc
};
#endif


void VulkanResultCheckLoggerFunction( String msg )
{
	TODO( "Logger should report this instead of printing to the console" );
	std::cout << "Abnormal Vulkan result: " << msg << std::endl;
}

String VulkanResultToString( VkResult result )
{
	switch( result ) {
	case VK_SUCCESS:
		return "VK_SUCCESS";
	case VK_NOT_READY:
		return "VK_NOT_READY";
	case VK_TIMEOUT:
		return "VK_TIMEOUT";
	case VK_EVENT_SET:
		return "VK_EVENT_SET";
	case VK_EVENT_RESET:
		return "VK_EVENT_RESET";
	case VK_INCOMPLETE:
		return "VK_INCOMPLETE";
	case VK_ERROR_OUT_OF_HOST_MEMORY:
		return "VK_ERROR_OUT_OF_HOST_MEMORY";
	case VK_ERROR_OUT_OF_DEVICE_MEMORY:
		return "VK_ERROR_OUT_OF_DEVICE_MEMORY";
	case VK_ERROR_INITIALIZATION_FAILED:
		return "VK_ERROR_INITIALIZATION_FAILED";
	case VK_ERROR_DEVICE_LOST:
		return "VK_ERROR_DEVICE_LOST";
	case VK_ERROR_MEMORY_MAP_FAILED:
		return "VK_ERROR_MEMORY_MAP_FAILED";
	case VK_ERROR_LAYER_NOT_PRESENT:
		return "VK_ERROR_LAYER_NOT_PRESENT";
	case VK_ERROR_EXTENSION_NOT_PRESENT:
		return "VK_ERROR_EXTENSION_NOT_PRESENT";
	case VK_ERROR_FEATURE_NOT_PRESENT:
		return "VK_ERROR_FEATURE_NOT_PRESENT";
	case VK_ERROR_INCOMPATIBLE_DRIVER:
		return "VK_ERROR_INCOMPATIBLE_DRIVER";
	case VK_ERROR_TOO_MANY_OBJECTS:
		return "VK_ERROR_TOO_MANY_OBJECTS";
	case VK_ERROR_FORMAT_NOT_SUPPORTED:
		return "VK_ERROR_FORMAT_NOT_SUPPORTED";
	case VK_ERROR_FRAGMENTED_POOL:
		return "VK_ERROR_FRAGMENTED_POOL";
	case VK_ERROR_SURFACE_LOST_KHR:
		return "VK_ERROR_SURFACE_LOST_KHR";
	case VK_ERROR_NATIVE_WINDOW_IN_USE_KHR:
		return "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR";
	case VK_SUBOPTIMAL_KHR:
		return "VK_SUBOPTIMAL_KHR";
	case VK_ERROR_OUT_OF_DATE_KHR:
		return "VK_ERROR_OUT_OF_DATE_KHR";
	case VK_ERROR_INCOMPATIBLE_DISPLAY_KHR:
		return "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR";
	case VK_ERROR_VALIDATION_FAILED_EXT:
		return "VK_ERROR_VALIDATION_FAILED_EXT";
	case VK_ERROR_INVALID_SHADER_NV:
		return "VK_ERROR_INVALID_SHADER_NV";
	case VK_ERROR_OUT_OF_POOL_MEMORY_KHR:
		return "VK_ERROR_OUT_OF_POOL_MEMORY_KHR";
	case VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR:
		return "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR";
	default:
		return "<unknown vulkan result>";
	}
	return "<unknown vulkan result>";
}

String VulkanFormatToString( VkFormat format )
{
	switch( format ) {
	case VK_FORMAT_UNDEFINED:
		return "VK_FORMAT_UNDEFINED";
	case VK_FORMAT_R4G4_UNORM_PACK8:
		return "VK_FORMAT_R4G4_UNORM_PACK8";
	case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
		return "VK_FORMAT_R4G4B4A4_UNORM_PACK16";
	case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
		return "VK_FORMAT_B4G4R4A4_UNORM_PACK16";
	case VK_FORMAT_R5G6B5_UNORM_PACK16:
		return "VK_FORMAT_R5G6B5_UNORM_PACK16";
	case VK_FORMAT_B5G6R5_UNORM_PACK16:
		return "VK_FORMAT_B5G6R5_UNORM_PACK16";
	case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
		return "VK_FORMAT_R5G5B5A1_UNORM_PACK16";
	case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
		return "VK_FORMAT_B5G5R5A1_UNORM_PACK16";
	case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
		return "VK_FORMAT_A1R5G5B5_UNORM_PACK16";
	case VK_FORMAT_R8_UNORM:
		return "VK_FORMAT_R8_UNORM";
	case VK_FORMAT_R8_SNORM:
		return "VK_FORMAT_R8_SNORM";
	case VK_FORMAT_R8_USCALED:
		return "VK_FORMAT_R8_USCALED";
	case VK_FORMAT_R8_SSCALED:
		return "VK_FORMAT_R8_SSCALED";
	case VK_FORMAT_R8_UINT:
		return "VK_FORMAT_R8_UINT";
	case VK_FORMAT_R8_SINT:
		return "VK_FORMAT_R8_SINT";
	case VK_FORMAT_R8_SRGB:
		return "VK_FORMAT_R8_SRGB";
	case VK_FORMAT_R8G8_UNORM:
		return "VK_FORMAT_R8G8_UNORM";
	case VK_FORMAT_R8G8_SNORM:
		return "VK_FORMAT_R8G8_SNORM";
	case VK_FORMAT_R8G8_USCALED:
		return "VK_FORMAT_R8G8_USCALED";
	case VK_FORMAT_R8G8_SSCALED:
		return "VK_FORMAT_R8G8_SSCALED";
	case VK_FORMAT_R8G8_UINT:
		return "VK_FORMAT_R8G8_UINT";
	case VK_FORMAT_R8G8_SINT:
		return "VK_FORMAT_R8G8_SINT";
	case VK_FORMAT_R8G8_SRGB:
		return "VK_FORMAT_R8G8_SRGB";
	case VK_FORMAT_R8G8B8_UNORM:
		return "VK_FORMAT_R8G8B8_UNORM";
	case VK_FORMAT_R8G8B8_SNORM:
		return "VK_FORMAT_R8G8B8_SNORM";
	case VK_FORMAT_R8G8B8_USCALED:
		return "VK_FORMAT_R8G8B8_USCALED";
	case VK_FORMAT_R8G8B8_SSCALED:
		return "VK_FORMAT_R8G8B8_SSCALED";
	case VK_FORMAT_R8G8B8_UINT:
		return "VK_FORMAT_R8G8B8_UINT";
	case VK_FORMAT_R8G8B8_SINT:
		return "VK_FORMAT_R8G8B8_SINT";
	case VK_FORMAT_R8G8B8_SRGB:
		return "VK_FORMAT_R8G8B8_SRGB";
	case VK_FORMAT_B8G8R8_UNORM:
		return "VK_FORMAT_B8G8R8_UNORM";
	case VK_FORMAT_B8G8R8_SNORM:
		return "VK_FORMAT_B8G8R8_SNORM";
	case VK_FORMAT_B8G8R8_USCALED:
		return "VK_FORMAT_B8G8R8_USCALED";
	case VK_FORMAT_B8G8R8_SSCALED:
		return "VK_FORMAT_B8G8R8_SSCALED";
	case VK_FORMAT_B8G8R8_UINT:
		return "VK_FORMAT_B8G8R8_UINT";
	case VK_FORMAT_B8G8R8_SINT:
		return "VK_FORMAT_B8G8R8_SINT";
	case VK_FORMAT_B8G8R8_SRGB:
		return "VK_FORMAT_B8G8R8_SRGB";
	case VK_FORMAT_R8G8B8A8_UNORM:
		return "VK_FORMAT_R8G8B8A8_UNORM";
	case VK_FORMAT_R8G8B8A8_SNORM:
		return "VK_FORMAT_R8G8B8A8_SNORM";
	case VK_FORMAT_R8G8B8A8_USCALED:
		return "VK_FORMAT_R8G8B8A8_USCALED";
	case VK_FORMAT_R8G8B8A8_SSCALED:
		return "VK_FORMAT_R8G8B8A8_SSCALED";
	case VK_FORMAT_R8G8B8A8_UINT:
		return "VK_FORMAT_R8G8B8A8_UINT";
	case VK_FORMAT_R8G8B8A8_SINT:
		return "VK_FORMAT_R8G8B8A8_SINT";
	case VK_FORMAT_R8G8B8A8_SRGB:
		return "VK_FORMAT_R8G8B8A8_SRGB";
	case VK_FORMAT_B8G8R8A8_UNORM:
		return "VK_FORMAT_B8G8R8A8_UNORM";
	case VK_FORMAT_B8G8R8A8_SNORM:
		return "VK_FORMAT_B8G8R8A8_SNORM";
	case VK_FORMAT_B8G8R8A8_USCALED:
		return "VK_FORMAT_B8G8R8A8_USCALED";
	case VK_FORMAT_B8G8R8A8_SSCALED:
		return "VK_FORMAT_B8G8R8A8_SSCALED";
	case VK_FORMAT_B8G8R8A8_UINT:
		return "VK_FORMAT_B8G8R8A8_UINT";
	case VK_FORMAT_B8G8R8A8_SINT:
		return "VK_FORMAT_B8G8R8A8_SINT";
	case VK_FORMAT_B8G8R8A8_SRGB:
		return "VK_FORMAT_B8G8R8A8_SRGB";
	case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
		return "VK_FORMAT_A8B8G8R8_UNORM_PACK32";
	case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
		return "VK_FORMAT_A8B8G8R8_SNORM_PACK32";
	case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
		return "VK_FORMAT_A8B8G8R8_USCALED_PACK32";
	case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
		return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32";
	case VK_FORMAT_A8B8G8R8_UINT_PACK32:
		return "VK_FORMAT_A8B8G8R8_UINT_PACK32";
	case VK_FORMAT_A8B8G8R8_SINT_PACK32:
		return "VK_FORMAT_A8B8G8R8_SINT_PACK32";
	case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
		return "VK_FORMAT_A8B8G8R8_SRGB_PACK32";
	case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
		return "VK_FORMAT_A2R10G10B10_UNORM_PACK32";
	case VK_FORMAT_A2R10G10B10_SNORM_PACK32:
		return "VK_FORMAT_A2R10G10B10_SNORM_PACK32";
	case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
		return "VK_FORMAT_A2R10G10B10_USCALED_PACK32";
	case VK_FORMAT_A2R10G10B10_SSCALED_PACK32:
		return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32";
	case VK_FORMAT_A2R10G10B10_UINT_PACK32:
		return "VK_FORMAT_A2R10G10B10_UINT_PACK32";
	case VK_FORMAT_A2R10G10B10_SINT_PACK32:
		return "VK_FORMAT_A2R10G10B10_SINT_PACK32";
	case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
		return "VK_FORMAT_A2B10G10R10_UNORM_PACK32";
	case VK_FORMAT_A2B10G10R10_SNORM_PACK32:
		return "VK_FORMAT_A2B10G10R10_SNORM_PACK32";
	case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
		return "VK_FORMAT_A2B10G10R10_USCALED_PACK32";
	case VK_FORMAT_A2B10G10R10_SSCALED_PACK32:
		return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32";
	case VK_FORMAT_A2B10G10R10_UINT_PACK32:
		return "VK_FORMAT_A2B10G10R10_UINT_PACK32";
	case VK_FORMAT_A2B10G10R10_SINT_PACK32:
		return "VK_FORMAT_A2B10G10R10_SINT_PACK32";
	case VK_FORMAT_R16_UNORM:
		return "VK_FORMAT_R16_UNORM";
	case VK_FORMAT_R16_SNORM:
		return "VK_FORMAT_R16_SNORM";
	case VK_FORMAT_R16_USCALED:
		return "VK_FORMAT_R16_USCALED";
	case VK_FORMAT_R16_SSCALED:
		return "VK_FORMAT_R16_SSCALED";
	case VK_FORMAT_R16_UINT:
		return "VK_FORMAT_R16_UINT";
	case VK_FORMAT_R16_SINT:
		return "VK_FORMAT_R16_SINT";
	case VK_FORMAT_R16_SFLOAT:
		return "VK_FORMAT_R16_SFLOAT";
	case VK_FORMAT_R16G16_UNORM:
		return "VK_FORMAT_R16G16_UNORM";
	case VK_FORMAT_R16G16_SNORM:
		return "VK_FORMAT_R16G16_SNORM";
	case VK_FORMAT_R16G16_USCALED:
		return "VK_FORMAT_R16G16_USCALED";
	case VK_FORMAT_R16G16_SSCALED:
		return "VK_FORMAT_R16G16_SSCALED";
	case VK_FORMAT_R16G16_UINT:
		return "VK_FORMAT_R16G16_UINT";
	case VK_FORMAT_R16G16_SINT:
		return "VK_FORMAT_R16G16_SINT";
	case VK_FORMAT_R16G16_SFLOAT:
		return "VK_FORMAT_R16G16_SFLOAT";
	case VK_FORMAT_R16G16B16_UNORM:
		return "VK_FORMAT_R16G16B16_UNORM";
	case VK_FORMAT_R16G16B16_SNORM:
		return "VK_FORMAT_R16G16B16_SNORM";
	case VK_FORMAT_R16G16B16_USCALED:
		return "VK_FORMAT_R16G16B16_USCALED";
	case VK_FORMAT_R16G16B16_SSCALED:
		return "VK_FORMAT_R16G16B16_SSCALED";
	case VK_FORMAT_R16G16B16_UINT:
		return "VK_FORMAT_R16G16B16_UINT";
	case VK_FORMAT_R16G16B16_SINT:
		return "VK_FORMAT_R16G16B16_SINT";
	case VK_FORMAT_R16G16B16_SFLOAT:
		return "VK_FORMAT_R16G16B16_SFLOAT";
	case VK_FORMAT_R16G16B16A16_UNORM:
		return "VK_FORMAT_R16G16B16A16_UNORM";
	case VK_FORMAT_R16G16B16A16_SNORM:
		return "VK_FORMAT_R16G16B16A16_SNORM";
	case VK_FORMAT_R16G16B16A16_USCALED:
		return "VK_FORMAT_R16G16B16A16_USCALED";
	case VK_FORMAT_R16G16B16A16_SSCALED:
		return "VK_FORMAT_R16G16B16A16_SSCALED";
	case VK_FORMAT_R16G16B16A16_UINT:
		return "VK_FORMAT_R16G16B16A16_UINT";
	case VK_FORMAT_R16G16B16A16_SINT:
		return "VK_FORMAT_R16G16B16A16_SINT";
	case VK_FORMAT_R16G16B16A16_SFLOAT:
		return "VK_FORMAT_R16G16B16A16_SFLOAT";
	case VK_FORMAT_R32_UINT:
		return "VK_FORMAT_R32_UINT";
	case VK_FORMAT_R32_SINT:
		return "VK_FORMAT_R32_SINT";
	case VK_FORMAT_R32_SFLOAT:
		return "VK_FORMAT_R32_SFLOAT";
	case VK_FORMAT_R32G32_UINT:
		return "VK_FORMAT_R32G32_UINT";
	case VK_FORMAT_R32G32_SINT:
		return "VK_FORMAT_R32G32_SINT";
	case VK_FORMAT_R32G32_SFLOAT:
		return "VK_FORMAT_R32G32_SFLOAT";
	case VK_FORMAT_R32G32B32_UINT:
		return "VK_FORMAT_R32G32B32_UINT";
	case VK_FORMAT_R32G32B32_SINT:
		return "VK_FORMAT_R32G32B32_SINT";
	case VK_FORMAT_R32G32B32_SFLOAT:
		return "VK_FORMAT_R32G32B32_SFLOAT";
	case VK_FORMAT_R32G32B32A32_UINT:
		return "VK_FORMAT_R32G32B32A32_UINT";
	case VK_FORMAT_R32G32B32A32_SINT:
		return "VK_FORMAT_R32G32B32A32_SINT";
	case VK_FORMAT_R32G32B32A32_SFLOAT:
		return "VK_FORMAT_R32G32B32A32_SFLOAT";
	case VK_FORMAT_R64_UINT:
		return "VK_FORMAT_R64_UINT";
	case VK_FORMAT_R64_SINT:
		return "VK_FORMAT_R64_SINT";
	case VK_FORMAT_R64_SFLOAT:
		return "VK_FORMAT_R64_SFLOAT";
	case VK_FORMAT_R64G64_UINT:
		return "VK_FORMAT_R64G64_UINT";
	case VK_FORMAT_R64G64_SINT:
		return "VK_FORMAT_R64G64_SINT";
	case VK_FORMAT_R64G64_SFLOAT:
		return "VK_FORMAT_R64G64_SFLOAT";
	case VK_FORMAT_R64G64B64_UINT:
		return "VK_FORMAT_R64G64B64_UINT";
	case VK_FORMAT_R64G64B64_SINT:
		return "VK_FORMAT_R64G64B64_SINT";
	case VK_FORMAT_R64G64B64_SFLOAT:
		return "VK_FORMAT_R64G64B64_SFLOAT";
	case VK_FORMAT_R64G64B64A64_UINT:
		return "VK_FORMAT_R64G64B64A64_UINT";
	case VK_FORMAT_R64G64B64A64_SINT:
		return "VK_FORMAT_R64G64B64A64_SINT";
	case VK_FORMAT_R64G64B64A64_SFLOAT:
		return "VK_FORMAT_R64G64B64A64_SFLOAT";
	case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
		return "VK_FORMAT_B10G11R11_UFLOAT_PACK32";
	case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
		return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32";
	case VK_FORMAT_D16_UNORM:
		return "VK_FORMAT_D16_UNORM";
	case VK_FORMAT_X8_D24_UNORM_PACK32:
		return "VK_FORMAT_X8_D24_UNORM_PACK32";
	case VK_FORMAT_D32_SFLOAT:
		return "VK_FORMAT_D32_SFLOAT";
	case VK_FORMAT_S8_UINT:
		return "VK_FORMAT_S8_UINT";
	case VK_FORMAT_D16_UNORM_S8_UINT:
		return "VK_FORMAT_D16_UNORM_S8_UINT";
	case VK_FORMAT_D24_UNORM_S8_UINT:
		return "VK_FORMAT_D24_UNORM_S8_UINT";
	case VK_FORMAT_D32_SFLOAT_S8_UINT:
		return "VK_FORMAT_D32_SFLOAT_S8_UINT";
	case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
		return "VK_FORMAT_BC1_RGB_UNORM_BLOCK";
	case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
		return "VK_FORMAT_BC1_RGB_SRGB_BLOCK";
	case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
		return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK";
	case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
		return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK";
	case VK_FORMAT_BC2_UNORM_BLOCK:
		return "VK_FORMAT_BC2_UNORM_BLOCK";
	case VK_FORMAT_BC2_SRGB_BLOCK:
		return "VK_FORMAT_BC2_SRGB_BLOCK";
	case VK_FORMAT_BC3_UNORM_BLOCK:
		return "VK_FORMAT_BC3_UNORM_BLOCK";
	case VK_FORMAT_BC3_SRGB_BLOCK:
		return "VK_FORMAT_BC3_SRGB_BLOCK";
	case VK_FORMAT_BC4_UNORM_BLOCK:
		return "VK_FORMAT_BC4_UNORM_BLOCK";
	case VK_FORMAT_BC4_SNORM_BLOCK:
		return "VK_FORMAT_BC4_SNORM_BLOCK";
	case VK_FORMAT_BC5_UNORM_BLOCK:
		return "VK_FORMAT_BC5_UNORM_BLOCK";
	case VK_FORMAT_BC5_SNORM_BLOCK:
		return "VK_FORMAT_BC5_SNORM_BLOCK";
	case VK_FORMAT_BC6H_UFLOAT_BLOCK:
		return "VK_FORMAT_BC6H_UFLOAT_BLOCK";
	case VK_FORMAT_BC6H_SFLOAT_BLOCK:
		return "VK_FORMAT_BC6H_SFLOAT_BLOCK";
	case VK_FORMAT_BC7_UNORM_BLOCK:
		return "VK_FORMAT_BC7_UNORM_BLOCK";
	case VK_FORMAT_BC7_SRGB_BLOCK:
		return "VK_FORMAT_BC7_SRGB_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK";
	case VK_FORMAT_EAC_R11_UNORM_BLOCK:
		return "VK_FORMAT_EAC_R11_UNORM_BLOCK";
	case VK_FORMAT_EAC_R11_SNORM_BLOCK:
		return "VK_FORMAT_EAC_R11_SNORM_BLOCK";
	case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
		return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK";
	case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
		return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK";
	case VK_FORMAT_ASTC_4x4_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK";
	case VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK";
	case VK_FORMAT_ASTC_5x4_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK";
	case VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK";
	case VK_FORMAT_ASTC_5x5_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK";
	case VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK";
	case VK_FORMAT_ASTC_6x5_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK";
	case VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK";
	case VK_FORMAT_ASTC_6x6_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK";
	case VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK";
	case VK_FORMAT_ASTC_8x5_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK";
	case VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK";
	case VK_FORMAT_ASTC_8x6_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK";
	case VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK";
	case VK_FORMAT_ASTC_8x8_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK";
	case VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK";
	case VK_FORMAT_ASTC_10x5_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK";
	case VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK";
	case VK_FORMAT_ASTC_10x6_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK";
	case VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK";
	case VK_FORMAT_ASTC_10x8_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK";
	case VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK";
	case VK_FORMAT_ASTC_10x10_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK";
	case VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK";
	case VK_FORMAT_ASTC_12x10_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK";
	case VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK";
	case VK_FORMAT_ASTC_12x12_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK";
	case VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK";
	case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
		return "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG";
	case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
		return "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG";
	case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
		return "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG";
	case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
		return "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG";
	case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
		return "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG";
	case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
		return "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG";
	case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
		return "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG";
	case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG:
		return "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG";
	case VK_FORMAT_G8B8G8R8_422_UNORM_KHR:
		return "VK_FORMAT_G8B8G8R8_422_UNORM_KHR";
	case VK_FORMAT_B8G8R8G8_422_UNORM_KHR:
		return "VK_FORMAT_B8G8R8G8_422_UNORM_KHR";
	case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR:
		return "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR";
	case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR:
		return "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR";
	case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR:
		return "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR";
	case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR:
		return "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR";
	case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR:
		return "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR";
	case VK_FORMAT_R10X6_UNORM_PACK16_KHR:
		return "VK_FORMAT_R10X6_UNORM_PACK16_KHR";
	case VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR:
		return "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR";
	case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR:
		return "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR";
	case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR:
		return "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR";
	case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR:
		return "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR";
	case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR";
	case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR";
	case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR";
	case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR";
	case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR";
	case VK_FORMAT_R12X4_UNORM_PACK16_KHR:
		return "VK_FORMAT_R12X4_UNORM_PACK16_KHR";
	case VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR:
		return "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR";
	case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR:
		return "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR";
	case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR:
		return "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR";
	case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR:
		return "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR";
	case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR";
	case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR";
	case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR";
	case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR";
	case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR:
		return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR";
	case VK_FORMAT_G16B16G16R16_422_UNORM_KHR:
		return "VK_FORMAT_G16B16G16R16_422_UNORM_KHR";
	case VK_FORMAT_B16G16R16G16_422_UNORM_KHR:
		return "VK_FORMAT_B16G16R16G16_422_UNORM_KHR";
	case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR:
		return "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR";
	case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR:
		return "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR";
	case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR:
		return "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR";
	case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR:
		return "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR";
	case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR:
		return "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR";
	default:
		return "<unknown vulkan format>";
	}
	return "<unknown vulkan format>";
}

VkResult VulkanResultCheck( VkResult result )
{
#if BUILD_ENABLE_VULKAN_RESULT_CHECK_LOGGING_WARNINGS || BUILD_ENABLE_VULKAN_RESULT_CHECK_LOGGING_ERRORS
	switch( result ) {
#if BUILD_ENABLE_VULKAN_RESULT_CHECK_LOGGING_WARNINGS
	case VK_NOT_READY:
		VulkanResultCheckLoggerFunction( "VK_NOT_READY" );
		break;
	case VK_TIMEOUT:
		VulkanResultCheckLoggerFunction( "VK_TIMEOUT" );
		break;
	case VK_EVENT_SET:
		VulkanResultCheckLoggerFunction( "VK_EVENT_SET" );
		break;
	case VK_EVENT_RESET:
		VulkanResultCheckLoggerFunction( "VK_EVENT_RESET" );
		break;
	case VK_INCOMPLETE:
		VulkanResultCheckLoggerFunction( "VK_INCOMPLETE" );
		break;
	case VK_SUBOPTIMAL_KHR:
		VulkanResultCheckLoggerFunction( "VK_SUBOPTIMAL_KHR" );
		break;
#endif

#if BUILD_ENABLE_VULKAN_RESULT_CHECK_LOGGING_ERRORS
	case VK_ERROR_OUT_OF_HOST_MEMORY:
		VulkanResultCheckLoggerFunction( "VK_ERROR_OUT_OF_HOST_MEMORY" );
		break;
	case VK_ERROR_OUT_OF_DEVICE_MEMORY:
		VulkanResultCheckLoggerFunction( "VK_ERROR_OUT_OF_DEVICE_MEMORY" );
		break;
	case VK_ERROR_INITIALIZATION_FAILED:
		VulkanResultCheckLoggerFunction( "VK_ERROR_INITIALIZATION_FAILED" );
		break;
	case VK_ERROR_DEVICE_LOST:
		VulkanResultCheckLoggerFunction( "VK_ERROR_DEVICE_LOST" );
		break;
	case VK_ERROR_MEMORY_MAP_FAILED:
		VulkanResultCheckLoggerFunction( "VK_ERROR_MEMORY_MAP_FAILED" );
		break;
	case VK_ERROR_LAYER_NOT_PRESENT:
		VulkanResultCheckLoggerFunction( "VK_ERROR_LAYER_NOT_PRESENT" );
		break;
	case VK_ERROR_EXTENSION_NOT_PRESENT:
		VulkanResultCheckLoggerFunction( "VK_ERROR_EXTENSION_NOT_PRESENT" );
		break;
	case VK_ERROR_FEATURE_NOT_PRESENT:
		VulkanResultCheckLoggerFunction( "VK_ERROR_FEATURE_NOT_PRESENT" );
		break;
	case VK_ERROR_INCOMPATIBLE_DRIVER:
		VulkanResultCheckLoggerFunction( "VK_ERROR_INCOMPATIBLE_DRIVER" );
		break;
	case VK_ERROR_TOO_MANY_OBJECTS:
		VulkanResultCheckLoggerFunction( "VK_ERROR_TOO_MANY_OBJECTS" );
		break;
	case VK_ERROR_FORMAT_NOT_SUPPORTED:
		VulkanResultCheckLoggerFunction( "VK_ERROR_FORMAT_NOT_SUPPORTED" );
		break;
	case VK_ERROR_FRAGMENTED_POOL:
		VulkanResultCheckLoggerFunction( "VK_ERROR_FRAGMENTED_POOL" );
		break;
	case VK_ERROR_SURFACE_LOST_KHR:
		VulkanResultCheckLoggerFunction( "VK_ERROR_SURFACE_LOST_KHR" );
		break;
	case VK_ERROR_NATIVE_WINDOW_IN_USE_KHR:
		VulkanResultCheckLoggerFunction( "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR" );
		break;
	case VK_ERROR_OUT_OF_DATE_KHR:
		VulkanResultCheckLoggerFunction( "VK_ERROR_OUT_OF_DATE_KHR" );
		break;
	case VK_ERROR_INCOMPATIBLE_DISPLAY_KHR:
		VulkanResultCheckLoggerFunction( "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR" );
		break;
	case VK_ERROR_VALIDATION_FAILED_EXT:
		VulkanResultCheckLoggerFunction( "VK_ERROR_VALIDATION_FAILED_EXT" );
		break;
	case VK_ERROR_INVALID_SHADER_NV:
		VulkanResultCheckLoggerFunction( "VK_ERROR_INVALID_SHADER_NV" );
		break;
	case VK_ERROR_OUT_OF_POOL_MEMORY_KHR:
		VulkanResultCheckLoggerFunction( "VK_ERROR_OUT_OF_POOL_MEMORY_KHR" );
		break;
	case VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR:
		VulkanResultCheckLoggerFunction( "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" );
		break;
#endif
	default:
		break;
	}
#endif

#if BUILD_ENABLE_VULKAN_RESULT_CHECK_ASSERTION_WARNINGS
	if( result > 0 ) {
		assert( 0 && "Vulkan result check detected a warning" );
	}
#endif

#if BUILD_ENABLE_VULKAN_RESULT_CHECK_ASSERTION_ERRORS
	if( result < 0 ) {
		assert( 0 && "Vulkan result check detected an error" );
	}
#endif

	return result;
}

}
